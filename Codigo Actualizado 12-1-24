import java.util.Arrays;
import java.util.Scanner;

public class odiar {
    public static int mascaraTipo (){ // Pide tipo de máscara
        System.out.println("Hola, introduce el formato de la máscara (0-Decimal / 1-CDIR)");
        for (int cont = 0; cont==0; cont++) { //Comprobar opción valida
            int opcion;
            Scanner sc = new Scanner(System.in);
            System.out.print("Opción: ");
            opcion = sc.nextInt();
            if (opcion == 0) {
                System.out.println("Opción elegida - formato decimal");
                return opcion;
            } else if (opcion == 1) {
                System.out.println("Opción elegida - formato CDIR");
                return opcion;
            } else {
                System.out.println("Opción incorrecta, vuelve a intentarlo.");
            }
        }
        return 0;
    }

    public static String introducirDatos (int opcion) { // Pedir IP/Máscara
        Scanner sc = new Scanner(System.in);
        if (opcion == 0) { // Pedir máscara 0/1
            System.out.print("Por favor introduce tu máscara en formato decimal: ");
            return sc.next();
        } else if (opcion == 1) {
            System.out.print("Por favor introduce tu máscara en formato CDIR: ");
            return sc.next();
        }

        else {
            System.out.print("Por favor introduce tu IP: ");
            return sc.next();
        }
    }

    public static int comprobarLongitud (String dato) {
        byte longitud = 0;
        int cont = 1;

        // 1) Crear longitud del array
        for (; longitud<dato.length(); longitud++) {
            if (String.valueOf(dato.charAt(longitud)).equals(".")) {
                cont++;
            }
        }

        // 2) Comprobar longitud del array
        if (cont==4) { // Longitud correcta
            System.out.println("Longitud correcta, continuando.");
            return 0;
        } else if (cont>4){ // Longitud incorrecta (>)
            System.out.println("Whoops, los datos introducidos tienen más de 4 octetos, por favor vuelve a introducirlos.");
            System.out.println("Abortando...");
            return 1;
        } else if (cont<4) { // Longitud incorrecta (<)
            System.out.println("Whoops, los datos introducidos tienen menos de 4 octetos, por favor vuelve a introducirlos.");
            System.out.println("Abortando...");
            return 1;
        }
        return 1;
    }

    public static String[] segmentar (String dato, int comprobante) {
        if (comprobante == 1) { // Longitud incorrecta, aborta
            System.out.println("Comprobante Longitud equivocado, ha ocurrido un error, abortando...");
        } else if (comprobante == 0) { // Longitud correcta, continúa
            int aux = 0;
            byte longitud = 0;
            int auxarray = 0;
            // 1) Crear array
            String[] array = new String[4];

            // 2) Segmentar array (determinante = '.')
            for (; longitud<dato.length(); longitud++) {
                try {
                    if (String.valueOf(dato.charAt(longitud)).equals(".")) {
                        array[auxarray] = dato.substring(aux, longitud);
                        aux = longitud+1;
                        auxarray++;
                    }
                } catch (Exception e) {
                    System.out.println("Ha ocurrido un error.");
                }
            }

            // 3) Colocar la última parte del array como 4to valor
            if (longitud==dato.length()){
                array[auxarray] = dato.substring(aux, longitud);
            }
            return array;
        }
        return null;
    }

    public static int[] stringInt (String[] dato) {
        // 1) Pasar de String a Int
        int[] arrayInt=new int[4];
        for (int cont=0; cont<=3; cont++) {
            arrayInt[cont] = Integer.parseInt(dato[cont]);
        }
        return arrayInt;
    }

    public static int comprobarRango (int[] dato) {
        // 1) Compruebo si los valores del array están entre 0 y 255
        int correcto = 0;
        for (int cont=0; cont<=3; cont++) {
            if (dato[cont]<256 && dato[cont]>-1) {
                correcto++;
            }
        }
        if (correcto==4) { // Correcto, valores dentro del rango.
            System.out.println("Los valores están dentro del rango, continuando...");
            return 0;
        } else { // Incorrecto, valores fuera del rango.
            System.out.println("Whoops, los valores no están dentro del rango, abortando...");
            return 1;
        }
    }


    public static String[] stringBinario(String[] dato, int comprobante){
        if (comprobante==1) { // Comprobante incorrecto, aborta
            System.out.println("Comprobante Rango equivocado, ha ocurrido un error, abortando...");
        } else if (comprobante==0) {
            //1) Crea un nuevo array y convierte los valores
            String[] arrayBinario = new String[4];
            for (int cont=0; cont<=3; cont++) {
                arrayBinario[cont] = Integer.toBinaryString(Integer.parseInt(dato[cont]));

                //2) Comprueba los caracteres, si hay menos de 8, rellena con 0's a la izquierda
                if (arrayBinario[cont].length()<8) {
                    int ceros = 8-arrayBinario[cont].length();
                    for (; ceros>0; ceros--) {
                        arrayBinario[cont] =  "0" + arrayBinario[cont];
                    }
                }
            }
            return arrayBinario;
        }

        return null;
    }

    public static int comprobarValores (int[] dato, int comprobante) {
        if (comprobante==1) {
            System.out.println("Comprobante Rango equivocado, ha ocurrido un error, abortando...");
        } else if (comprobante==0) {
            int valor = 0;
            int aux = 0;

            // 1) Compruebo si el número está dentro del rango
            int[] arrayBits = {0, 128, 192, 224, 240, 248, 252, 254, 255};
            for (int cont=0; cont<4; cont++) {
                for (int bit = 0; bit<9; bit++) {
                    if (dato[cont]==arrayBits[bit]){
                        valor=0;
                        bit=8;
                    } else {
                        valor=1;
                    }
                }
                // 2) Compruebo si hay 255 y en base a eso, compruebo si los siguientes octetos son 0
                if (dato[cont]!=255) {
                    for (;cont<dato.length;cont++) {
                        if (dato[cont]==0) {
                            aux = 0;
                        } else {
                            aux = 1;
                        }
                    }
                    //3) Fix Octetos
                    if (dato[cont-1]<dato[cont-2] && cont!=0) {
                        aux = 0;
                    }
                }
            }
            if (valor==0 && aux==0) {
                System.out.println("Los valores están dentro del rango, continuando...");
                return 0;
            } else {
                System.out.println("Whoops, los valores no están dentro del rango, abortando...");
                return 1;
            }
        }
        return 1;
    }

    public static int comprobarMascaraCDIR (String dato) {
        // 1) Comprueba si la máscara está dentro del rango
        if (Integer.parseInt(dato)>0 && Integer.parseInt(dato)<33) { // Correcto, está dentro del rango, continúa
            System.out.println("La máscara proporcionada está dentro del rango, continuando...");
            return 0;
        } else { // Incorrecto, no está dentro del rango, aborta
            System.out.println("Whoops, la máscara está fuera del rango, abortando...");
            return 1;
        }
    }

    public static String[] rellenarUnoCero (String dato, int comprobante) {
        if (comprobante==1) { // Comprobante incorrecto, aborta
            System.out.println("Comprobante Valor equivocado, ha ocurrido un error, abortando...");
        } else { // Comprobante correcto, continúa
            // 1) Comprueba y convierte la Máscara /8 y calcula el resto
            int octeto = 0;
            int resto = 0;
            int mascara = Integer.parseInt(dato);
            int[] arrayBit = {128, 64, 32, 16, 8, 4, 2, 1};
            String[] array = new String[4];
            for (; mascara>9;octeto++) {
                mascara = mascara-8;
                array[octeto]= String.valueOf(255);
            }
            if (mascara>0) {
                for (; mascara>0; mascara--) {
                    resto = resto + arrayBit[mascara - 1];
                }
                array[octeto] = String.valueOf(resto);
            }

            // 2) Rellena con 0 si hay valores nulos
            for (int cont=0; cont<4; cont++) {
                if (array[cont]==null) {
                    array[cont] = String.valueOf(0);
                }
            }
            return array;
        }
        return null;
    }

    public static String[] multiplicarBits (String[] dato, String[]dato1, int comprobanteIP, int comprobanteMascara) {
        String[] resultado = {"", "", "", ""};
        int unos = 0;
        System.out.println(Arrays.toString(dato));
        System.out.println(Arrays.toString(dato1));
        if (comprobanteIP==1 || comprobanteMascara==1) {
            System.out.println("Whoops, no se puede continuar, hay un error en alguno de los comprobantes.");
        } else if (comprobanteIP==0 && comprobanteMascara==0) {
            // 1) Calcular Nº de 1's en la Máscara
            for (int octeto = 0; octeto<4; octeto++) {
                for (int posicion = 0; posicion<8; posicion++) {
                    System.out.println("TEST1");
                    if (dato1[octeto].charAt(posicion)==1) {
                        System.out.println("aaaa");
                        unos++;
                    }
                    System.out.println(unos);
                }
            }

            // 2) Multiplico los 1's por la IP
            for (int octeto = 0; octeto<4; octeto++) {
                for (int posicion = 0; posicion<8; posicion++) {
                    System.out.println("TEST2");
                    if (unos!=0) {
                        resultado[octeto] = resultado[octeto] + dato[octeto].charAt(posicion);
                    }
                    else {
                        resultado[octeto] = resultado[octeto] + 0;
                    }
                }
            }
            System.out.println(Arrays.toString(resultado));
            return resultado;
        }
        return null;
    }


    public static void main(String[] args) {
        for (int salida = 0; salida==0; ) {
            // APARTADO: IP - Pasos 1-9 //
            // 1) Pedir tipo de Máscara
            int masktype = mascaraTipo();

            // 2) Pedir IP
            String ip = introducirDatos(2);

            // 3) Pedir Máscara
            String mascara = introducirDatos(masktype);

            // 4) Mostrar información en pantalla
            System.out.println("Esta es tu información: ");
            System.out.println("IP: " + ip);
            if (masktype == 0) { //Decimal
                System.out.println("Máscara: " + mascara);
            } else if (masktype == 1) { //CDIR
                System.out.println("Máscara: /" + mascara);
            }

            // 5) Comprobar longitud del array (IP)
            int ipLongitudComprobante = comprobarLongitud(ip);

            // 6) Segmentar IP
            String[] ipSegmentada = segmentar(ip, ipLongitudComprobante);

            // 7) Convertir IP segmentada a entero
            int[] ipInt = stringInt(ipSegmentada);

            // 8) Comprobar los rangos de los valores de la IP
            int ipValorComprobante = comprobarRango(ipInt);

            // 9) Convertir IP a binario
            String[] ipBinario = stringBinario(ipSegmentada, ipValorComprobante);

            if (masktype==0) {
                // APARTADO: Máscara Decimal - Pasos 1-6 //
                // 1) Comprobar longitud del array (Máscara)
                int mascaraLongitudComprobante = comprobarLongitud(mascara);

                // 2) Segmentar Máscara
                String[] mascaraSegmentada = segmentar(mascara, mascaraLongitudComprobante);

                // 3) Convertir Máscara segmentada a entero
                int[] mascaraInt = stringInt(mascaraSegmentada);

                // 4) Comprobar los rangos de los valores de la Máscara
                int mascaraRangoComprobante = comprobarRango(mascaraInt);

                // 5) Comprobar los valores de la Máscara
                int mascaraValorComprobante = comprobarValores(mascaraInt, mascaraRangoComprobante);

                // 6) Convertir Máscara a binario
                String[] mascaraBinario = stringBinario(mascaraSegmentada, mascaraValorComprobante);

                // 7) Multiplicar los bits
                String[] resultadoMultiplicar = multiplicarBits(ipBinario, mascaraBinario, ipValorComprobante, mascaraRangoComprobante);
                System.out.println(Arrays.toString(resultadoMultiplicar));

            } else if (masktype==1) {
                // APARTADO: Máscara CDIR - Pasos 1-X //
                // 1) Comprobar si la máscara está dentro del rango (1-32)
                int mascaraRangoComprobante = comprobarMascaraCDIR(mascara);

                // 2) Calcular los octetos y rellenar los 1's y 0's
                String[] mascaraConvertida = rellenarUnoCero(mascara, mascaraRangoComprobante);

                // 3) Passar Máscara a binario
                String[] mascaraBinario = stringBinario(mascaraConvertida, mascaraRangoComprobante);

            }

            Scanner sc = new Scanner(System.in);
            for (int cont = 0; cont == 0;) {
                int opcion = sc.nextInt();
                System.out.println("¿Quieres salir? (0 - no / 1 - sí)");
                System.out.print("Opción: ");
                if (opcion == 1) {
                    System.out.println("Hasta luego.");
                    salida++;
                    cont++;
                } else if (opcion == 0) {
                    System.out.println("Continuando...");
                    cont++;
                } else {
                    System.out.println("Opción incorrecta, vuelve a intentarlo.");
                }
            }
        }
    }
}
